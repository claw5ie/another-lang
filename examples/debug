// Prohibit symbol definition in single statement blocks, like:
// if true a :: int = 42;

enum Bar
{
  Hello,
  World,
}

union Baz
{
  x :: i32,
  y :: i64,
}

struct Faz
{
  x :: i32,
  y :: i64,
}

alias Foo = i32;
alias Poo = proc() -> void;

proc foo(x :: bool, y :: i32) -> i32
{
  proc baz()
  {
  }
  return x;
}

proc main(bool, i32)
{
  alias foo = i32;

  a :: Foo = _(x = 2);
  b ::= Foo(x = 2);

  c :: struct{ x :: int };
  d :: enum{ x };
  alias Foo = union{ x :: 42 };

  Foo.Hello;
  foo.hello;

  if false
  {
    2 + 2;
  }

  if foo
    {
    case 0
      if foo then
      {
      case 1
      }
    case 1
      2 + 2;
    case 0
    case 1
    }
  else
    {

    }

  if foo
    {
    case 0 then
    case 1 do { } while false;
    }
  else
    {
      slfjslf;
      jlsjfls;
      lsjf;
    }

  hello;
  2 + 2 * 2;
  (2 + 2) * 2;
  -2 + --2;
  !false && true || false;
  1 <= 2;
  (2+2)*2;
  2*(2+2);
  cast(2);
  cast(void *, 2);
  2 + cast(proc() -> void, 2,);
  2 + cast(4);

  if 2 + 2 then
    {
      if 2 2;
      2 = 2;
    }
  else
    {
      4 * 4;
    }

  while false do
    {
    }

  do
   { }
  while true;

  e :: int = 42;
  f :: i32 = 42;
  g :: i42 = 42;
  h = 69;
  p ::= false;

  i :: i42 = 42;
  j :: i42* = &a;
  k :: i42 = b**;

  l :: i32[3] = _(42, _(42), 90);

  a[2][42] = 42;

  m :: proc(i32, hello :: bool);
  n :: proc(i32, hello :: bool) = null;

  o = _(hello = 42);

  a();
  (bar)(name = 42);
  (hello*)(2, 3, (4 - 4), _(2, 3));

  return;
}
