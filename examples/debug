enum Bar
{
  Hello,
  World = .Hello,
}

union Baz
{
  x :: i32,
  y :: i64,
}

struct Faz
{
  x :: i32,
  y :: i64,
}

alias Foo = i32;
alias Poo = proc() -> void;

proc dummy()
{

}

proc foo(x :: bool, y :: i32) -> i32
{
  proc baz()
  {
  }
  return y;
}

proc main(bool, i32)
{
  alias Foz = i32;

  a :: Foz = 32;
  b ::= Foo(x = 2);

  c :: struct{ x :: i32 };
  d :: enum{ x };
  alias Foo = union{ x :: i32 };

  aa ::= Bar.Hello;
  bb ::= b.x;

  if false
    {
      aa ::= 2 + 2;
    }

  switch true
    {
    case false then
      {
        aa ::= 2 + 2;
      }
    default main(false, 0);
    }

  switch true
    {
    }

  switch true
    {
    default main(false, 0);
    }

  switch 42
    {
    case 0
    case 1
    case 2 then { }
    default main(false, 0);
    }

  cc ::= 2 + 2 * 2;
  dd ::= (2 + 2) * 2;
  ee ::= -2 + --2;
  ff ::= !false && true || false;
  gg ::= 1 <= 2;
  hh ::= (2+2)*2;
  ii ::= 2*(2+2);
  jj :: i32 = cast(2);
  kk ::= cast(i32, 2); // should pass type hint??
  ll ::= cast(void *, 2);
  mm ::= 2 + cast(proc() -> void, 2,);
  nn ::= 2 + cast(4);

  if 2 + 2 then
    {
      if 2 dummy();
      2 = 2;
    }
  else
    {
      aa ::= 4 * 4;
    }

  while false do
    {
    }

  do
   { }
  while true;

  e :: i32 = 42;
  f :: i32 = 42;
  g :: i42 = 42;
  h ::= 69;
  p ::= false;

  i :: i42 = 42;
  j :: i42* = &a;
  jp :: i42** = &j;
  k :: i42 = jp**;

  xs :: i32[1][2] = _(_(2, 42));
  xxs :: Foo[3] = _(Foo(x = 42), _(x = 69));

  xs[2][42] = 42;

  oo :: struct { x :: i32 } = _(x = 42);
  pp ::= oo;

  m :: proc(i32, hello :: bool);
  n :: proc(i32, hello :: bool) = null;
  u ::= &n;

  bar ::= main;

  (bar)(false, 42);
  (u*)(42, false);

  return;
}

proc foofaz()
{
  alias C = i32;
  alias B = C;
  alias A = B;

  struct Foo
  {
    x :: Foo*,
  }
}
